[{"/home/krishnendu/Downloads/todo_react_app-master/src/index.js":"1","/home/krishnendu/Downloads/todo_react_app-master/src/App.js":"2"},{"size":252,"mtime":1657516146000,"results":"3","hashOfConfig":"4"},{"size":6205,"mtime":1710921193577,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ocsl1y",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/home/krishnendu/Downloads/todo_react_app-master/src/index.js",["13","14","15"],[],"/home/krishnendu/Downloads/todo_react_app-master/src/App.js",["16","17","18","19"],[],"import {\n\tButton,\n\tContainer,\n\tText,\n\tTitle,\n\tModal,\n\tTextInput,\n\tGroup,\n\tCard,\n\tActionIcon,\n\tCode,\n\tBadge,\n\tFooter,\n} from '@mantine/core';\nimport { useState, useRef, useEffect } from 'react';\nimport { MoonStars, Sun, Trash, Check } from 'tabler-icons-react';\n\nimport {\n\tMantineProvider,\n\tColorSchemeProvider,\n\tColorScheme,\n} from '@mantine/core';\nimport { useColorScheme } from '@mantine/hooks';\nimport { useHotkeys, useLocalStorage } from '@mantine/hooks';\n\nexport default function App() {\n\tconst [tasks, setTasks] = useState([]);\n\tconst [opened, setOpened] = useState(false);\n\n\tconst preferredColorScheme = useColorScheme();\n\tconst [colorScheme, setColorScheme] = useLocalStorage({\n\t\tkey: 'mantine-color-scheme',\n\t\tdefaultValue: 'light',\n\t\tgetInitialValueInEffect: true,\n\t});\n\tconst toggleColorScheme = value =>\n\t\tsetColorScheme(value || (colorScheme === 'dark' ? 'light' : 'dark'));\n\n\tuseHotkeys([['mod+J', () => toggleColorScheme()]]);\n\n\tconst taskTitle = useRef('');\n\tconst taskSummary = useRef('');\n\tconst taskDeadline = useRef('');\n\n\tfunction createTask() {\n\t\tsetTasks([\n\t\t\t...tasks,\n\t\t\t{\n\t\t\t\ttitle: taskTitle.current.value,\n\t\t\t\tsummary: taskSummary.current.value,\n\t\t\t\tdeadline: taskDeadline.current.value,\n\t\t\t\tdone: false,\n\t\t\t},\n\t\t]);\n\n\t\tsaveTasks([\n\t\t\t...tasks,\n\t\t\t{\n\t\t\t\ttitle: taskTitle.current.value,\n\t\t\t\tsummary: taskSummary.current.value,\n\t\t\t\tdeadline: taskDeadline.current.value,\n\t\t\t\tdone: false,\n\t\t\t},\n\t\t]);\n\t}\n\n\tfunction deleteTask(index) {\n\t\tvar clonedTasks = [...tasks];\n\n\t\tclonedTasks.splice(index, 1);\n\n\t\tsetTasks(clonedTasks);\n\n\t\tsaveTasks([...clonedTasks]);\n\t}\n\n\tfunction markTaskAsDone(index) {\n\t\tconst updatedTasks = [...tasks];\n\t\tupdatedTasks[index].done = !updatedTasks[index].done;\n\n\t\tsetTasks(updatedTasks);\n\t\tsaveTasks(updatedTasks);\n\t}\n\n\tfunction loadTasks() {\n\t\tlet loadedTasks = localStorage.getItem('tasks');\n\n\t\tlet tasks = JSON.parse(loadedTasks);\n\n\t\tif (tasks) {\n\t\t\tsetTasks(tasks);\n\t\t}\n\t}\n\n\tfunction saveTasks(tasks) {\n\t\tlocalStorage.setItem('tasks', JSON.stringify(tasks));\n\t}\n\n\tuseEffect(() => {\n\t\tloadTasks();\n\t}, []);\n\n\treturn (\n\t\t<ColorSchemeProvider\n\t\t\tcolorScheme={colorScheme}\n\t\t\ttoggleColorScheme={toggleColorScheme}>\n\t\t\t<MantineProvider\n\t\t\t\ttheme={{ colorScheme, defaultRadius: 'md' }}\n\t\t\t\twithGlobalStyles\n\t\t\t\twithNormalizeCSS>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<Modal\n\t\t\t\t\t\topened={opened}\n\t\t\t\t\t\tsize={'md'}\n\t\t\t\t\t\ttitle={'New Task'}\n\t\t\t\t\t\twithCloseButton={false}\n\t\t\t\t\t\tonClose={() => {\n\t\t\t\t\t\t\tsetOpened(false);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tcentered>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tmt={'md'}\n\t\t\t\t\t\t\tref={taskTitle}\n\t\t\t\t\t\t\tplaceholder={'Task Title'}\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\tlabel={'Title'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tref={taskSummary}\n\t\t\t\t\t\t\tmt={'md'}\n\t\t\t\t\t\t\tplaceholder={'Task Summary'}\n\t\t\t\t\t\t\tlabel={'Summary'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tref={taskDeadline}\n\t\t\t\t\t\t\tmt={'md'}\n\t\t\t\t\t\t\tplaceholder={'Task Deadline'}\n\t\t\t\t\t\t\tlabel={'Deadline'}\n\t\t\t\t\t\t\ttype={'date'}\n\t\t\t\t\t\t\tmin={new Date().toISOString().split('T')[0]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Group mt={'md'} position={'apart'}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetOpened(false);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant={'subtle'}>\n\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tcreateTask();\n\t\t\t\t\t\t\t\t\tsetOpened(false);\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\tCreate Task\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Modal>\n\t\t\t\t\t<Container size={550} my={40}>\n\t\t\t\t\t\t<Group position={'apart'}>\n\t\t\t\t\t\t\t<Title\n\t\t\t\t\t\t\t\tsx={theme => ({\n\t\t\t\t\t\t\t\t\tfontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\t\t\t\t\t\t\t\t\tfontWeight: 900,\n\t\t\t\t\t\t\t\t})}>\n\t\t\t\t\t\t\t\tMy Tasks\n\t\t\t\t\t\t\t</Title>\n\t\t\t\t\t\t\t<ActionIcon\n\t\t\t\t\t\t\t\tcolor={'blue'}\n\t\t\t\t\t\t\t\tonClick={() => toggleColorScheme()}\n\t\t\t\t\t\t\t\tsize='lg'>\n\t\t\t\t\t\t\t\t{colorScheme === 'dark' ? (\n\t\t\t\t\t\t\t\t\t<Sun size={16} />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<MoonStars size={16} />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</ActionIcon>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t{tasks.length > 0 ? (\n\t\t\t\t\t\t\ttasks.map((task, index) => {\n\t\t\t\t\t\t\t\tif (task.title) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Card withBorder key={index} mt={'sm'}>\n\t\t\t\t\t\t\t\t\t\t\t<Group position={'apart'}>\n\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tweight={'bold'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextDecoration: task.done\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? 'line-through'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: 'none',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{task.title}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={task.done ? 'teal' : 'gray'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={task.done ? 'filled' : 'outline'}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{task.done ? 'Done' : 'Pending'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ActionIcon\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => markTaskAsDone(index)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Check\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={task.done ? 'teal' : 'gray'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</ActionIcon>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ActionIcon\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeleteTask(index);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={'red'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={'transparent'}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Trash />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</ActionIcon>\n\t\t\t\t\t\t\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t\t\t\t\t\t<Text color={'dimmed'} size={'md'} mt={'sm'}>\n\t\t\t\t\t\t\t\t\t\t\t\t{task.summary\n\t\t\t\t\t\t\t\t\t\t\t\t\t? task.summary\n\t\t\t\t\t\t\t\t\t\t\t\t\t: 'No summary was provided for this task'}\n\t\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t\t\t<Text size={'sm'} mt={'sm'}>\n\t\t\t\t\t\t\t\t\t\t\t\t{task.deadline\n\t\t\t\t\t\t\t\t\t\t\t\t\t? `Deadline: ${task.deadline}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t: 'No deadline set'}\n\t\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Text size={'lg'} mt={'md'} color={'dimmed'}>\n\t\t\t\t\t\t\t\tYou have no tasks\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetOpened(true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tmt={'md'}>\n\t\t\t\t\t\t\tNew Task\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Container>\n\t\t\t\t\t<Footer height={60} p=\"md\" sx={{\n\t\t\t\t\t\tbackgroundColor: colorScheme === 'dark' ? '#1a1b1e' : '#f8f9fa', position: 'fixed',\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t}}>\n\t\t\t\t\t\t<Container size={550}>\n\t\t\t\t\t\t\t<Group position=\"apart\">\n\t\t\t\t\t\t\t\t<Text size=\"sm\" color={colorScheme === 'dark' ? 'gray.4' : 'gray.6'}>\n\t\t\t\t\t\t\t\t\t<span>&copy; 2023 Todo app by Krishnendu</span>\n\t\t\t\t\t\t\t\t\t<span>. All rights reserved.</span>\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Footer>\n\t\t\t\t</div>\n\t\t\t</MantineProvider>\n\t\t</ColorSchemeProvider>\n\t);\n}",{"ruleId":"20","severity":1,"message":"21","line":6,"column":2,"nodeType":"22","messageId":"23","endLine":6,"endColumn":17},{"ruleId":"20","severity":1,"message":"24","line":7,"column":2,"nodeType":"22","messageId":"23","endLine":7,"endColumn":21},{"ruleId":"20","severity":1,"message":"25","line":8,"column":2,"nodeType":"22","messageId":"23","endLine":8,"endColumn":13},{"ruleId":"20","severity":1,"message":"26","line":11,"column":2,"nodeType":"22","messageId":"23","endLine":11,"endColumn":6},{"ruleId":"20","severity":1,"message":"25","line":21,"column":2,"nodeType":"22","messageId":"23","endLine":21,"endColumn":13},{"ruleId":"20","severity":1,"message":"27","line":30,"column":8,"nodeType":"22","messageId":"23","endLine":30,"endColumn":28},{"ruleId":"28","severity":1,"message":"29","line":180,"column":32,"nodeType":"30","messageId":"31","endLine":180,"endColumn":34},"no-unused-vars","'MantineProvider' is defined but never used.","Identifier","unusedVar","'ColorSchemeProvider' is defined but never used.","'ColorScheme' is defined but never used.","'Code' is defined but never used.","'preferredColorScheme' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd"]